import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Array;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;


public class GUITicTacToe implements ActionListener {

	JFrame frame = new JFrame();
	JButton[][] button = new JButton[3][3];
	int[][] board = new int[3][3];
	final int BLANK = 0;
	final int X_MOVE = 1;
	final int O_MOVE = 2;
	final int X_TURN = 0;
	final int O_TURN = 1;
	int turn = X_TURN;
	Container center = new Container();
	JLabel xLabel = new JLabel("X wins: 0");
	JLabel oLabel = new JLabel("O wins: 0");
	JButton xChangeName = new JButton("Change X's Name.");
	JButton oChangeName = new JButton("Change O's Name.");
	JTextField xChangeField = new JTextField();
	JTextField oChangeField = new JTextField();
	Container north = new Container();
	String xPlayerName = "X";
	String oPlayerName = "O";
	int xwins = 0;
	int owins = 0;
	
	
	public GUITicTacToe() {
		frame.setSize(400,400);
		
		frame.setLayout(new BorderLayout());
		center.setLayout(new GridLayout(3,3));
		for (int i = 0; i < button.length; i++) {
			for (int j = 0; j< button[0].length; j++) {
				button[j][i] = new JButton (j+ "," +i);
				center.add(button[j][i]);
				button[j][i].addActionListener(this);
			}
		}
		frame.add(center, BorderLayout.CENTER);
		//North container
		north.setLayout(new GridLayout(1,2));
		north.add(xLabel);
		north.add(oLabel);
		north.add(xChangeName);
		xChangeName.addActionListener(this);
		north.add(oChangeName);
		oChangeName.addActionListener(this);
		north.add(xChangeField);
		north.add(oChangeField);
		frame.add(north, BorderLayout.NORTH);
		
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	
	public static void main(String[] args) {
		new GUITicTacToe();

	}


	@Override
	public void actionPerformed(ActionEvent event) {
		JButton current;
		boolean gridButton = false;
		for (int i = 0; i< button.length; i++) {
			for (int j = 0; j < button[0].length; j++) {
				if (event.getSource().equals(button[j][i])) {
						gridButton = true;
						current = button[j][i];
						if (board[j][i] == BLANK) {
							if (turn == X_TURN) {
								current.setText("X");
								board[j][i] = X_MOVE;
								turn = O_TURN;
								}
							else {
								current.setText("O");
								board[j][i] = O_MOVE;
								turn = X_TURN;
							}
							//check for wins and ties
							if (Win() == 1) {// X wins
								
								xwins++;
								xLabel.setText(xPlayerName + "wins: " + xwins);
								clearBoard();
							}
							else if (Win() == 2) {//O wins
								
								owins++;
								oLabel.setText(oPlayerName + "wins: " + owins);
								clearBoard();
							}
							else if (CheckTie() == true) { // tie
								System.out.println("Tie!");
			            	}
					}
				}
			}
		}
		if (gridButton == false) {
			if (event.getSource().equals(xChangeName) == true) {
				xPlayerName = xChangeField.getText();
				xLabel.setText(xPlayerName + "wins: " + xwins);
			}
			else if (event.getSource().equals(oChangeName) == true) {
				oPlayerName = oChangeField.getText();
				oLabel.setText(oPlayerName + "wins: " + owins);
			}
			
			else {
				JButton current;
				for (int row = 0; row < button.length; row++) {
					for (int column = 0; column < button[0].length; column++) {
						if (event.getSource().equals(button[row][column]) == true) {
							board[row][column] = X_MOVE;
							current = button[row][column];
							current.setText("X");
							current.setEnabled(false);
							if (Win() == 1) {
								System.out.println("X wins!");
								clearBoard();
							}
							else if (Win() == 2) {
								System.out.println("X wins!");
								clearBoard();
							}
						}
					}
				}
			}
			
			
		}
		
	}
	public int Win() {
    	
    	int i =0;
    	// Assumes two players...
    	for (i = 1; i<= 2; i++) {
        	
        	if (board[0][0] == i && board[0][1] == i && board[0][2] == i) {
            	return i;
        	}
        	if (board[0][0] == i && board[1][1] == i && board[2][2] == i) {
            	return i;
        	}
        	if (board[0][2] == i && board[1][1] == i && board[2][0] == i) {
            	return i;
        	}
        	if (board[0][2] == i && board[1][2] == i && board[2][2] == i) {
            	return i;
        	}
        	if (board[1][0] == i && board[1][1] == i && board[1][2] == i) {
            	return i;
        	}
        	if (board[2][0] == i && board[2][1] == i && board[2][2] == i) {
            	return i;
        	}
        	if (board[0][0] == i && board[1][0] == i && board[2][0] == i) {
            	return i;
        	}
        	if (board[0][1] == i && board[1][1] == i && board[2][1] == i) {
            	return i;
        	}
    	
    	
    	}
    	return 0; // No one won
	}
	
	public boolean CheckBoardFill() {
    	if(
    	board[0][0] != BLANK &&
    	board[1][0] != BLANK &&
    	board[2][0] != BLANK &&
    	board[0][1] != BLANK &&
    	board[0][2] != BLANK &&
    	board[1][1] != BLANK &&
    	board[1][2] != BLANK &&
    	board[2][1] != BLANK &&
    	board[2][2] != BLANK) {
        	return true;
    	}
    	return false;
	}
	
	//if board is filled and nobody's won, then it's a tie and return true
	public boolean CheckTie() {
    	if (CheckBoardFill()==true && (Win() == 0)) {
        	return true;
    	}
    	return false;
	}
	
	
	public void clearBoard() {
		for (int a = 0; a < board.length; a++) {
			for (int b = 0; b < board[0].length; b++) {
				board[a][b] = BLANK;
				button[a][b].setText("");
			}
		}
		turn  = X_TURN;
	}

}



